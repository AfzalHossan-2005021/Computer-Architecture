
RegisterFile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000010c  00000180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b5  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d1  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00000eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000372  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010b  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  7a:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initialize>:
unsigned char RegFile[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void initialize() {
	MCUCSR |= (1 << JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1 << JTD);
  88:	84 b7       	in	r24, 0x34	; 52
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	84 bf       	out	0x34, r24	; 52
	
	DDRA = 0xFF;	// 7-4 Data1, 3-0 Data2
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;	// 7-4 RegSrc1, 3-0 RegSrc2
  92:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x00;	// 5 Clock, 4 RegWrite, 3-0 DataIn
  94:	14 ba       	out	0x14, r1	; 20
	DDRD = 0x00;	// 3-0 RegDst
  96:	11 ba       	out	0x11, r1	; 17
	
	PORTD = 0x00;	// just initialize the output
  98:	12 ba       	out	0x12, r1	; 18
  9a:	08 95       	ret

0000009c <main>:
}

int main(void)
{
    initialize();
  9c:	0e 94 41 00 	call	0x82	; 0x82 <initialize>
	
	unsigned char curCLK = 0;
	unsigned char prevCLK = 0;
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <main+0xa>
	
	PORTD = 0x00;	// just initialize the output
}

int main(void)
{
  a4:	39 2f       	mov	r19, r25
	unsigned char dataOut_1 = 0;
	unsigned char dataOut_2 = 0;
	
    while (1) 
    {
		curCLK = PINC & (1 << CLOCK);
  a6:	93 b3       	in	r25, 0x13	; 19
  a8:	90 72       	andi	r25, 0x20	; 32
		
		dataOut_1 = RegFile[(PINB >> 4)] << 4;
  aa:	a6 b3       	in	r26, 0x16	; 22
		dataOut_2 = RegFile[(PINB & 0x0F)] & 0x0F;
  ac:	e6 b3       	in	r30, 0x16	; 22
	
    while (1) 
    {
		curCLK = PINC & (1 << CLOCK);
		
		dataOut_1 = RegFile[(PINB >> 4)] << 4;
  ae:	a2 95       	swap	r26
  b0:	af 70       	andi	r26, 0x0F	; 15
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	a0 5a       	subi	r26, 0xA0	; 160
  b6:	bf 4f       	sbci	r27, 0xFF	; 255
		dataOut_2 = RegFile[(PINB & 0x0F)] & 0x0F;
		PORTA = dataOut_1 | dataOut_2;
  b8:	8c 91       	ld	r24, X
  ba:	28 2f       	mov	r18, r24
  bc:	22 95       	swap	r18
  be:	20 7f       	andi	r18, 0xF0	; 240
    while (1) 
    {
		curCLK = PINC & (1 << CLOCK);
		
		dataOut_1 = RegFile[(PINB >> 4)] << 4;
		dataOut_2 = RegFile[(PINB & 0x0F)] & 0x0F;
  c0:	ef 70       	andi	r30, 0x0F	; 15
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
		PORTA = dataOut_1 | dataOut_2;
  c8:	80 81       	ld	r24, Z
  ca:	8f 70       	andi	r24, 0x0F	; 15
  cc:	82 2b       	or	r24, r18
  ce:	8b bb       	out	0x1b, r24	; 27
		
		if(!prevCLK && curCLK)
  d0:	31 11       	cpse	r19, r1
  d2:	11 c0       	rjmp	.+34     	; 0xf6 <main+0x5a>
  d4:	99 23       	and	r25, r25
  d6:	31 f3       	breq	.-52     	; 0xa4 <main+0x8>
		{
			if(PINC & (1 << REG_WRITE)){
  d8:	9c 9b       	sbis	0x13, 4	; 19
  da:	06 c0       	rjmp	.+12     	; 0xe8 <main+0x4c>
				RegFile[PIND] = PINC;
  dc:	e0 b3       	in	r30, 0x10	; 16
  de:	83 b3       	in	r24, 0x13	; 19
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	e0 5a       	subi	r30, 0xA0	; 160
  e4:	ff 4f       	sbci	r31, 0xFF	; 255
  e6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	e7 ea       	ldi	r30, 0xA7	; 167
  ea:	f1 e6       	ldi	r31, 0x61	; 97
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x50>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x56>
  f2:	00 00       	nop
  f4:	d7 cf       	rjmp	.-82     	; 0xa4 <main+0x8>
			}
			_delay_ms(100);
		}
		else if(prevCLK && !curCLK)
  f6:	91 11       	cpse	r25, r1
  f8:	d5 cf       	rjmp	.-86     	; 0xa4 <main+0x8>
  fa:	e7 ea       	ldi	r30, 0xA7	; 167
  fc:	f1 e6       	ldi	r31, 0x61	; 97
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x62>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x68>
 104:	00 00       	nop
 106:	ce cf       	rjmp	.-100    	; 0xa4 <main+0x8>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
