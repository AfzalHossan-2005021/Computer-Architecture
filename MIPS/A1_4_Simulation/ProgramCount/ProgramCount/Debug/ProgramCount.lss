
ProgramCount.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e0  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a0  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000335  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e2  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000183d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initialize>:
#define	BEQ	 5
#define ZF	 4
#define OFFSET_SIGN 3

void initialize() {
	MCUCSR|=(1<<JTD);
  6c:	84 b7       	in	r24, 0x34	; 52
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  72:	84 b7       	in	r24, 0x34	; 52
  74:	80 68       	ori	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52
	
	DDRA = 0xFF;	// Next address
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;	// Clock at pin 0
  7c:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x00;	// Branch Offset: 3-0, jump: 7, bneq: 6, beq:5, zeroFlag: 4
  7e:	14 ba       	out	0x14, r1	; 20
	DDRD = 0x00;	// Jump address
  80:	11 ba       	out	0x11, r1	; 17
	
	PORTA = 0x00;	// Initial PC=0
  82:	1b ba       	out	0x1b, r1	; 27
  84:	08 95       	ret

00000086 <main>:
}

int main(void)
{
    initialize();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <initialize>
	
	unsigned char prevCLK = 0;
	unsigned char Clock = 0;
	unsigned char nextIns = 0;
  8a:	20 e0       	ldi	r18, 0x00	; 0

int main(void)
{
    initialize();
	
	unsigned char prevCLK = 0;
  8c:	90 e0       	ldi	r25, 0x00	; 0
	
	unsigned char jumpAddress = 0;
		
    while (1) 
    {
		Clock = PINB;
  8e:	86 b3       	in	r24, 0x16	; 22
				
		if(!prevCLK && Clock)
  90:	91 11       	cpse	r25, r1
  92:	24 c0       	rjmp	.+72     	; 0xdc <main+0x56>
  94:	88 23       	and	r24, r24
  96:	51 f1       	breq	.+84     	; 0xec <main+0x66>
		{
			jump = PINC & (1 << JUMP);
  98:	43 b3       	in	r20, 0x13	; 19
			beq = PINC & (1 << BEQ);
  9a:	63 b3       	in	r22, 0x13	; 19
			bneq = PINC & (1 << BNEQ);
  9c:	93 b3       	in	r25, 0x13	; 19
			zeroFlag = PINC & (1 << ZF);
  9e:	33 b3       	in	r19, 0x13	; 19
			
			branchOffset = PINC & (0x0F);
  a0:	73 b3       	in	r23, 0x13	; 19
			offsetSign = branchOffset & (1 << OFFSET_SIGN);
			
			jumpAddress = PIND;
  a2:	50 b3       	in	r21, 0x10	; 16
			
			nextIns += 1;
			
			if(jump)
  a4:	44 23       	and	r20, r20
  a6:	94 f0       	brlt	.+36     	; 0xcc <main+0x46>
				
		if(!prevCLK && Clock)
		{
			jump = PINC & (1 << JUMP);
			beq = PINC & (1 << BEQ);
			bneq = PINC & (1 << BNEQ);
  a8:	90 74       	andi	r25, 0x40	; 64
			zeroFlag = PINC & (1 << ZF);
  aa:	30 71       	andi	r19, 0x10	; 16
			branchOffset = PINC & (0x0F);
			offsetSign = branchOffset & (1 << OFFSET_SIGN);
			
			jumpAddress = PIND;
			
			nextIns += 1;
  ac:	2f 5f       	subi	r18, 0xFF	; 255
			
			if(jump)
			{
				nextIns = jumpAddress;
			}
			else if((beq && zeroFlag) || (bneq && !zeroFlag))
  ae:	65 ff       	sbrs	r22, 5
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <main+0x32>
  b2:	31 11       	cpse	r19, r1
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <main+0x3a>
  b6:	1d c0       	rjmp	.+58     	; 0xf2 <main+0x6c>
  b8:	99 23       	and	r25, r25
  ba:	49 f0       	breq	.+18     	; 0xce <main+0x48>
  bc:	31 11       	cpse	r19, r1
  be:	07 c0       	rjmp	.+14     	; 0xce <main+0x48>
			jump = PINC & (1 << JUMP);
			beq = PINC & (1 << BEQ);
			bneq = PINC & (1 << BNEQ);
			zeroFlag = PINC & (1 << ZF);
			
			branchOffset = PINC & (0x0F);
  c0:	97 2f       	mov	r25, r23
  c2:	9f 70       	andi	r25, 0x0F	; 15
			{
				nextIns = jumpAddress;
			}
			else if((beq && zeroFlag) || (bneq && !zeroFlag))
			{
				if(offsetSign)
  c4:	73 fd       	sbrc	r23, 3
				{
					branchOffset |= 0xF0;
  c6:	90 6f       	ori	r25, 0xF0	; 240
				}
				nextIns += branchOffset;
  c8:	29 0f       	add	r18, r25
  ca:	01 c0       	rjmp	.+2      	; 0xce <main+0x48>
			
			nextIns += 1;
			
			if(jump)
			{
				nextIns = jumpAddress;
  cc:	25 2f       	mov	r18, r21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	e7 ea       	ldi	r30, 0xA7	; 167
  d0:	f1 e6       	ldi	r31, 0x61	; 97
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <main+0x4c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x52>
  d8:	00 00       	nop
  da:	08 c0       	rjmp	.+16     	; 0xec <main+0x66>
				}
				nextIns += branchOffset;
			}
			_delay_ms(100);
		}
		else if(prevCLK && !Clock){
  dc:	81 11       	cpse	r24, r1
  de:	06 c0       	rjmp	.+12     	; 0xec <main+0x66>
  e0:	e7 ea       	ldi	r30, 0xA7	; 167
  e2:	f1 e6       	ldi	r31, 0x61	; 97
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x5e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x64>
  ea:	00 00       	nop
			_delay_ms(100);
		}
		PORTA = nextIns;
  ec:	2b bb       	out	0x1b, r18	; 27
		prevCLK = Clock;
  ee:	98 2f       	mov	r25, r24
    }
  f0:	ce cf       	rjmp	.-100    	; 0x8e <main+0x8>
			
			if(jump)
			{
				nextIns = jumpAddress;
			}
			else if((beq && zeroFlag) || (bneq && !zeroFlag))
  f2:	91 11       	cpse	r25, r1
  f4:	e5 cf       	rjmp	.-54     	; 0xc0 <main+0x3a>
  f6:	eb cf       	rjmp	.-42     	; 0xce <main+0x48>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
