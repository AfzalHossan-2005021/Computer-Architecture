
DataMemory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000016e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a6  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d1  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b8  00000000  00000000  00000e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000363  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000da  00000000  00000000  000014cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initialize>:
unsigned char DataMem[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void initialize(){
	MCUCSR |= (1 << JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1 << JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	
	DDRA = 0xFF;	// DataOut: 3-0
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;	// Address: 3-0
  8c:	17 ba       	out	0x17, r1	; 23
	DDRC = 0x00;	// MemWrite: 0, Clock: 1
  8e:	14 ba       	out	0x14, r1	; 20
	DDRD = 0x00;	// DataIn: 3-0
  90:	11 ba       	out	0x11, r1	; 17
	
	PORTD = 0x00;	// Just initialize output
  92:	12 ba       	out	0x12, r1	; 18
  94:	08 95       	ret

00000096 <main>:
}

int main(void)
{
	initialize();
  96:	0e 94 3e 00 	call	0x7c	; 0x7c <initialize>
	
    unsigned char curCLK = 0;
	unsigned char prevCLK = 0;
	unsigned char memWrite = 0;
	
	PORTA = DataMem[PINB];
  9a:	e6 b3       	in	r30, 0x16	; 22
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	e0 5a       	subi	r30, 0xA0	; 160
  a0:	ff 4f       	sbci	r31, 0xFF	; 255
  a2:	80 81       	ld	r24, Z
  a4:	8b bb       	out	0x1b, r24	; 27
int main(void)
{
	initialize();
	
    unsigned char curCLK = 0;
	unsigned char prevCLK = 0;
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	01 c0       	rjmp	.+2      	; 0xac <main+0x16>
	
	PORTD = 0x00;	// Just initialize output
}

int main(void)
{
  aa:	98 2f       	mov	r25, r24
	
	PORTA = DataMem[PINB];
	
    while (1) 
    {
		curCLK = PINC & (1 << CLK);
  ac:	83 b3       	in	r24, 0x13	; 19
  ae:	82 70       	andi	r24, 0x02	; 2
		
		memWrite = PINC & (1 << MEM_WRITE);
  b0:	33 b3       	in	r19, 0x13	; 19
		
		PORTA = DataMem[PINB];
  b2:	e6 b3       	in	r30, 0x16	; 22
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	e0 5a       	subi	r30, 0xA0	; 160
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	20 81       	ld	r18, Z
  bc:	2b bb       	out	0x1b, r18	; 27
		
		if(!prevCLK && curCLK)
  be:	91 11       	cpse	r25, r1
  c0:	11 c0       	rjmp	.+34     	; 0xe4 <main+0x4e>
  c2:	88 23       	and	r24, r24
  c4:	91 f3       	breq	.-28     	; 0xaa <main+0x14>
		{
			if(memWrite){
  c6:	30 ff       	sbrs	r19, 0
  c8:	06 c0       	rjmp	.+12     	; 0xd6 <main+0x40>
				DataMem[PINB] = PIND;
  ca:	e6 b3       	in	r30, 0x16	; 22
  cc:	90 b3       	in	r25, 0x10	; 16
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	e0 5a       	subi	r30, 0xA0	; 160
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	e7 ea       	ldi	r30, 0xA7	; 167
  d8:	f1 e6       	ldi	r31, 0x61	; 97
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x44>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x4a>
  e0:	00 00       	nop
  e2:	e3 cf       	rjmp	.-58     	; 0xaa <main+0x14>
			}
			_delay_ms(100);
		}
		else if(prevCLK && !curCLK)
  e4:	81 11       	cpse	r24, r1
  e6:	e1 cf       	rjmp	.-62     	; 0xaa <main+0x14>
  e8:	e7 ea       	ldi	r30, 0xA7	; 167
  ea:	f1 e6       	ldi	r31, 0x61	; 97
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <main+0x56>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x5c>
  f2:	00 00       	nop
  f4:	da cf       	rjmp	.-76     	; 0xaa <main+0x14>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
