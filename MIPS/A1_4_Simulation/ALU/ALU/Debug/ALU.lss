
ALU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c5  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000538  00000000  00000000  000007cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000287  00000000  00000000  00000d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000303  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000df  00000000  00000000  000012c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	63 00       	.word	0x0063	; ????
  56:	66 00       	.word	0x0066	; ????
  58:	6e 00       	.word	0x006e	; ????
  5a:	81 00       	.word	0x0081	; ????
  5c:	71 00       	.word	0x0071	; ????
  5e:	77 00       	.word	0x0077	; ????
  60:	7a 00       	.word	0x007a	; ????
  62:	7e 00       	.word	0x007e	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  74:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initialize>:
#define AND	0b00000101
#define NOR	0b00000110
#define SUB	0b00000111

void initialize(){
	MCUCSR |= (1 << JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1 << JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	
	DDRA = 0xFF;	// ALU result
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;	// OpCode: 7-4, operand_1: 3-0
  8c:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF;	// ZF: 0
  8e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;	// operand_2: 3-0
  90:	11 ba       	out	0x11, r1	; 17
	
	PORTA = 0x00;	// Just initialize output
  92:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;	// Just initialize output
  94:	15 ba       	out	0x15, r1	; 21
  96:	08 95       	ret

00000098 <main>:
}

int main(void)
{
	initialize();
  98:	0e 94 3e 00 	call	0x7c	; 0x7c <initialize>
    while (1) 
    {
		OpCode = PINB >> 4;
		operand_1 = PINB & 0x0F;
		operand_2 = PIND;
		result = -1;
  9c:	6f ef       	ldi	r22, 0xFF	; 255
				break;
			default:
				break;
		}
		PORTA = result;
		PORTC = result == 0 ? 1 : 0;
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	50 e0       	ldi	r21, 0x00	; 0
	unsigned char operand_1;
	unsigned char operand_2;
	unsigned char result;
    while (1) 
    {
		OpCode = PINB >> 4;
  a2:	86 b3       	in	r24, 0x16	; 22
		operand_1 = PINB & 0x0F;
  a4:	96 b3       	in	r25, 0x16	; 22
  a6:	29 2f       	mov	r18, r25
  a8:	2f 70       	andi	r18, 0x0F	; 15
		operand_2 = PIND;
  aa:	30 b3       	in	r19, 0x10	; 16
		result = -1;
		
		switch(OpCode)
  ac:	e8 2f       	mov	r30, r24
  ae:	e2 95       	swap	r30
  b0:	ef 70       	andi	r30, 0x0F	; 15
  b2:	8e 2f       	mov	r24, r30
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	91 05       	cpc	r25, r1
  ba:	18 f5       	brcc	.+70     	; 0x102 <main+0x6a>
  bc:	fc 01       	movw	r30, r24
  be:	e6 5d       	subi	r30, 0xD6	; 214
  c0:	ff 4f       	sbci	r31, 0xFF	; 255
  c2:	0c 94 88 00 	jmp	0x110	; 0x110 <__tablejump2__>
		{
			case ADD :
				result = operand_1 + operand_2;
  c6:	82 2f       	mov	r24, r18
  c8:	83 0f       	add	r24, r19
				break;
  ca:	1c c0       	rjmp	.+56     	; 0x104 <main+0x6c>
			case SRL :
				result = operand_1 >> operand_2; 
  cc:	82 2f       	mov	r24, r18
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <main+0x3e>
  d2:	95 95       	asr	r25
  d4:	87 95       	ror	r24
  d6:	3a 95       	dec	r19
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <main+0x3a>
				break;
  da:	14 c0       	rjmp	.+40     	; 0x104 <main+0x6c>
			case OR :
				result = operand_1 | operand_2;
  dc:	82 2f       	mov	r24, r18
  de:	83 2b       	or	r24, r19
				break;
  e0:	11 c0       	rjmp	.+34     	; 0x104 <main+0x6c>
			case SLL :
				result = operand_1 << operand_2;
  e2:	82 2f       	mov	r24, r18
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <main+0x50>
  e6:	88 0f       	add	r24, r24
  e8:	3a 95       	dec	r19
  ea:	ea f7       	brpl	.-6      	; 0xe6 <main+0x4e>
				break;
  ec:	0b c0       	rjmp	.+22     	; 0x104 <main+0x6c>
			case AND :
				result = operand_1 & operand_2;
  ee:	82 2f       	mov	r24, r18
  f0:	83 23       	and	r24, r19
				break;
  f2:	08 c0       	rjmp	.+16     	; 0x104 <main+0x6c>
			case NOR :
				result = ~ (operand_1 | operand_2);
  f4:	82 2f       	mov	r24, r18
  f6:	83 2b       	or	r24, r19
  f8:	80 95       	com	r24
				break;
  fa:	04 c0       	rjmp	.+8      	; 0x104 <main+0x6c>
			case SUB :
				result = operand_1 - operand_2;
  fc:	82 2f       	mov	r24, r18
  fe:	83 1b       	sub	r24, r19
				break;
 100:	01 c0       	rjmp	.+2      	; 0x104 <main+0x6c>
    while (1) 
    {
		OpCode = PINB >> 4;
		operand_1 = PINB & 0x0F;
		operand_2 = PIND;
		result = -1;
 102:	86 2f       	mov	r24, r22
				result = operand_1 - operand_2;
				break;
			default:
				break;
		}
		PORTA = result;
 104:	8b bb       	out	0x1b, r24	; 27
		PORTC = result == 0 ? 1 : 0;
 106:	94 2f       	mov	r25, r20
 108:	81 11       	cpse	r24, r1
 10a:	95 2f       	mov	r25, r21
 10c:	95 bb       	out	0x15, r25	; 21
    }
 10e:	c9 cf       	rjmp	.-110    	; 0xa2 <main+0xa>

00000110 <__tablejump2__>:
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	05 90       	lpm	r0, Z+
 116:	f4 91       	lpm	r31, Z
 118:	e0 2d       	mov	r30, r0
 11a:	09 94       	ijmp

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
