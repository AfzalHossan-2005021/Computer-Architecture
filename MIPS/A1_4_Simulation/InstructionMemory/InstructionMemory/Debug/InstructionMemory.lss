
InstructionMemory.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c7  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053f  00000000  00000000  00000813  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000216  00000000  00000000  00000d52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030d  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  7a:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initialize>:
	{0b01000001, 0b00000001},
	{0b10110000, 0b00000000}
};

void initialize() {
	MCUCSR |= (1 << JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= (1 << JTD);
  88:	84 b7       	in	r24, 0x34	; 52
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	84 bf       	out	0x34, r24	; 52
	
	DDRA = 0xFF;	// Opcode output
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0x00;	// Address input
  92:	17 ba       	out	0x17, r1	; 23
	DDRC = 0xFF;	// RegSrc1: 7-4, RegSrc2: 3-0 and jump address 7-0
  94:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;	// RegDst: 3-0
  96:	81 bb       	out	0x11, r24	; 17
	
	PORTA = 0x00;	// Just initialize output
  98:	1b ba       	out	0x1b, r1	; 27
	PORTC = 0x00;	// Just initialize output
  9a:	15 ba       	out	0x15, r1	; 21
  9c:	08 95       	ret

0000009e <main>:



int main(void)
{
	initialize();
  9e:	0e 94 41 00 	call	0x82	; 0x82 <initialize>
    
    while (1) 
    {
		PORTA = InsMem[PINB][0] >> 4;
  a2:	e6 b3       	in	r30, 0x16	; 22
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	ee 0f       	add	r30, r30
  a8:	ff 1f       	adc	r31, r31
  aa:	e0 5a       	subi	r30, 0xA0	; 160
  ac:	ff 4f       	sbci	r31, 0xFF	; 255
  ae:	80 81       	ld	r24, Z
  b0:	82 95       	swap	r24
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	8b bb       	out	0x1b, r24	; 27
		PORTC = (InsMem[PINB][0] << 4) | (InsMem[PINB][1] >> 4);
  b6:	a6 b3       	in	r26, 0x16	; 22
  b8:	e6 b3       	in	r30, 0x16	; 22
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	aa 0f       	add	r26, r26
  be:	bb 1f       	adc	r27, r27
  c0:	a0 5a       	subi	r26, 0xA0	; 160
  c2:	bf 4f       	sbci	r27, 0xFF	; 255
  c4:	8c 91       	ld	r24, X
  c6:	20 e1       	ldi	r18, 0x10	; 16
  c8:	82 9f       	mul	r24, r18
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	91 81       	ldd	r25, Z+1	; 0x01
  da:	92 95       	swap	r25
  dc:	9f 70       	andi	r25, 0x0F	; 15
  de:	89 2b       	or	r24, r25
  e0:	85 bb       	out	0x15, r24	; 21
		PORTD = InsMem[PINB][1] & 0x0F;
  e2:	e6 b3       	in	r30, 0x16	; 22
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	81 81       	ldd	r24, Z+1	; 0x01
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	d6 cf       	rjmp	.-84     	; 0xa2 <main+0x4>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
